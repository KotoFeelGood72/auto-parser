const { startBrowser } = require('../utils/browser');

async function scrapeCarDetails(url) {
    const browser = await startBrowser();
    const page = await browser.newPage();

    try {
        console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

        await page.setExtraHTTPHeaders({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        });

        await page.goto(url, {
            waitUntil: 'domcontentloaded',
            timeout: 90000,
        });

        console.log('üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');

        await page.waitForSelector('[data-testid="listing-price"]', { timeout: 30000 });

        const title = await page.$eval('[data-testid="listing-sub-heading"]', el => el.innerText.trim());
        const make = await page.$eval('[data-testid="listing-sub-heading"]', el => el.innerText.split(" ")[0].trim());
        const model = await page.$eval('[data-testid="listing-sub-heading"]', el => el.innerText.split(" ")[1].trim());
        const year = await page.$eval('[data-testid="listing-year-value"]', el => el.innerText.trim());
        const bodyType = await page.$eval('[data-testid="overview-body_type-value"]', el => el.innerText.trim());
        const horsepower = await page.$eval('[data-testid="overview-horsepower-value"]', el => el.innerText.trim());
        const fuelType = await page.$eval('[data-testid="overview-fuel_type-value"]', el => el.innerText.trim());
        const motorsTrim = await page.$eval('[data-testid="overview-fuel_type-value"]', el => el.innerText.trim());
        const kilometers = await page.$eval('[data-testid="listing-kilometers-value"]', el => el.innerText.trim().replace(/\D/g, ''));
        const exteriorColor = await page.$eval('[data-testid="overview-exterior_color-value"]', el => el.innerText.trim());
        const location = await page.$eval('[data-testid="listing-location-map"]', el => el.innerText.trim());

        const priceFormatted = await page.$eval('[data-testid="listing-price"] span', el => el.innerText.trim().replace("AED", "").trim());
        const priceRaw = parseFloat(priceFormatted.replace(/,/g, ''));
        const currency = "AED";

        const shortUrl = url;

        // üîπ –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É `.MuiImageListItem-standard`
        const mainImageSelector = '.MuiImageListItem-standard';
        await page.waitForSelector(mainImageSelector, { timeout: 10000 });

        let clicked = false;
        for (let attempt = 0; attempt < 3; attempt++) { // 3 –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞
            console.log(`üì∏ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ #${attempt + 1}...`);

            const mainImage = await page.$(mainImageSelector);
            if (!mainImage) {
                console.warn('‚ö†Ô∏è –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ...');
                await page.waitForTimeout(1000);
                continue;
            }

            try {
                await mainImage.hover();
                await page.waitForTimeout(500);
                await mainImage.click({ delay: 200 });
                clicked = true;
                break;
            } catch (error) {
                console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
                await page.waitForTimeout(1000);
            }
        }

        if (!clicked) {
            throw new Error('üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!');
        }

        console.log('üì∏ –ö–ª–∏–∫–Ω—É–ª–∏, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª–∫–∏...');

        // üîπ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        await page.waitForSelector('.MuiModal-root', { timeout: 15000 });

        // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª–∫–µ
        await page.waitForFunction(() => {
            const modal = document.querySelector('.MuiModal-root');
            return modal && modal.querySelectorAll('.MuiImageList-root img').length > 0;
        }, { timeout: 45000 });

        // üîπ –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const photos = await page.evaluate(() => {
            return Array.from(document.querySelectorAll('.MuiModal-root .MuiImageList-root img'))
                .map(img => img.src)
                .filter(src => src.includes('.jpeg') || src.includes('.jpg') || src.includes('.png'));
        });

        console.log(`üì∏ –°–æ–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${photos.length}`);

            // üîπ –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "Call"
            const callButtonSelector = '[data-testid="call-cta-button"]';
            const callButton = await page.$(callButtonSelector);
            let phoneNumber = null;
            let sellerInfo = null;
    
            if (callButton) {
                console.log('üìû –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞...');
                await callButton.click();
                await page.waitForSelector('.MuiDialog-container', { timeout: 10000 });
    
                await page.waitForFunction(() => {
                    const modal = document.querySelector('.MuiDialog-container');
                    return modal && modal.querySelector('[data-testid="phone-number"]');
                }, { timeout: 15000 });
    
                // üîπ –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
                phoneNumber = await page.$eval('[data-testid="phone-number"]', el => el.innerText.trim());
                sellerInfo = await page.evaluate(() => {
                    const sellerElement = document.querySelector('.MuiTypography-body1.mui-style-1esa4yn');
                    return sellerElement ? sellerElement.innerText.trim() : null;
                });
    
                console.log(`üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}`);
                console.log(`üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: ${sellerInfo}`);
    
                // üîπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const closeButton = await page.$('[data-testid="close-button"]');
                if (closeButton) {
                    await closeButton.click();
                    await page.waitForTimeout(1000);
                }
            } else {
                console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            }

        const carDetails = {
            short_url: shortUrl,
            title,
            photos,
            make,
            model,
            year,
            body_type: bodyType,
            horsepower,
            fuel_type: fuelType,
            motors_trim: motorsTrim,
            kilometers,
            price: {
                formatted: priceFormatted,
                raw: priceRaw,
                currency,
            },
            exterior_color: exteriorColor,
            location,
            contact: {
                phone: phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω',
                seller: sellerInfo || '–ù–µ —É–∫–∞–∑–∞–Ω',
            },
        };

        console.log(carDetails);
        return carDetails;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
        return null;
    } finally {
        await browser.close();
    }
}

module.exports = { scrapeCarDetails };